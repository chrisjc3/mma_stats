{
    "contents" : "############################################################\n##############      UTILITIES     ##########################\n############################################################\nlibrary(\"rvest\")\nlibrary(\"stringr\")\nrequire(\"combinat\")\nrequire(\"compare\")\nsource(\"fm_functions.r\")\nlocal_path<-\"C:\\\\git\\\\fightmetrics\\\\data\\\\\"\n\n################################################################################\n##########################     TO REFRESH      #################################\n################################################################################\n\n# \n# ############################################################\n# ##############      GENERATE EVENTS TABLES      ############\n# ############################################################\n# up_events<-read_html('http://www.fightmetric.com/statistics/events/upcoming')\n# dn_events<-read_html('http://www.fightmetric.com/statistics/events/completed?page=all')\n# up_events<-create_event_table(up_events)\n# dn_events<-create_event_table(dn_events)\n# write.csv(up_events, file=paste(local_path,\"up_events\",\".csv\"), row.names=FALSE)\n# write.csv(dn_events, file=paste(local_path,\"dn_events\",\".csv\"), row.names=FALSE)\n# \n# ############################################################\n# ##############      GENERATE FIGHTER TABLE      ############\n# ##############      TAKES A BIT THE LONGER YOU GO   ########\n# ############################################################\n# \n# dn_urls<-as.list(dn_events[2:150,1]) #PAST 3 YEARS (USADA's BEEN IN ~2?)\n# fighter_table<-NULL\n# for(i in seq(1:length(dn_urls))){\n#   hld<-get_event_stats(as.character(dn_urls[i]))\n#   fighter_table<-rbind(fighter_table,hld)\n# }\n# write.csv(fighter_table, file=paste(local_path,\"master_fighter_table\",\".csv\"), row.names=FALSE)\n# \n# ############################################################\n# ##############      GENERATE UPCOMING CARD     #############\n# ############################################################\n# #get upcoming event card\n# card<-pull_upcoming_fighters()\n# \n# # save table for each fighter\n# for(i in seq(1,length(card[,2]),1)){\n#   fighter<-get_fighter_fights(card[i])\n#   if(is.null(fighter)==FALSE) {fighter<-cbind(fighter,calculate_table_score(fighter))}\n#   write.csv(fighter, file=paste(local_path,card[i],\".csv\"), row.names=FALSE)\n# }\n# \n# write.csv(card, file=paste(local_path,\"up_card\",\".csv\"), row.names=FALSE)\n# \n# ############################################################\n# ##############      GET VEGAS ODDS              ############\n# ############################################################\n# odds<-get_betting_odds()\n# write.csv(odds, file=paste(local_path,\"odds\",\".csv\"), row.names=FALSE)\n\n\n# \n# #################################################################################\n# ###########################     TO LOAD     #####################################\n# #################################################################################\n# up_events <- read.csv(file=paste(local_path,\"up_events\",\".csv\"), header=TRUE, sep=\",\")\n# dn_events <- read.csv(file=paste(local_path,\"dn_events\",\".csv\"), header=TRUE, sep=\",\")\n# fighter_table <- read.csv(file=paste(local_path,\"master_fighter_table\",\".csv\"), header=TRUE, sep=\",\")\n# card <- read.csv(file=paste(local_path,\"up_card\",\".csv\"), header=TRUE, sep=\",\")\n# odds <- read.csv(file=paste(local_path,\"odds\",\".csv\"), header=TRUE, sep=\",\")\n# #path <- fighter name or card[]\n# #fighter <- read.csv(file=paste(local_path,path,\".csv\"), header=TRUE, sep=\",\")\n# \n# \n# #################################################################################\n# ###########################     MANIPULATION     ################################\n# #################################################################################\n# \n# #http://www.gamblerspalace.com/lines/martial-arts/ -> fightmetrics \n# #IF ERRORS FIRE ADD N/A NAMING CONVERSION TO FUNCTION\n# odds <- read.csv(file=paste(local_path,\"odds\",\".csv\"), header=TRUE, sep=\",\")\n# odds<-fix_odds_names(odds)\n# \n# #merge odds to upcoming card & add stats \n# up_card<-merge(card, odds, by.x=\"name\", by.y=\"name\", all.x=TRUE)\n# up_card<-get_fights_sums(up_card)\n# #set up for side b side\n# up_card[c(\"against\")] <- lapply(up_card[c(\"against\")], toupper)\n# \n# #################################################################################\n# ############     INSERT DRAFT KINGS SALARIES     ################################\n# #################################################################################\n# \n# salaries <- read.csv(file=paste0(local_path,\"DKSalaries\",\".csv\"), header=TRUE, sep=\",\")\n# salaries <-salaries[,2:3]\n# salaries[,1] <-toupper(salaries[,1])\n# up_card<-append_dk_salary(up_card,salaries)\n# \n# #make export/import card#\n# sbs_up_card<-create_fights_view(up_card)\n# sbs_up_card<-cbind(sbs_up_card, \"\", \"\")\n# colnames(sbs_up_card)<-c(colnames(sbs_up_card[1:14]),\"pool\",\"proj\")\n# \n# #up_card = vertical data \n# #sbs_up_card = horizontal data\n# #################################################################################\n# ###########################     OUTPUT FORM     #################################\n# #################################################################################\n# write.csv(sbs_up_card, file=paste(local_path,\"output\\\\card_form\",\".csv\"), row.names=FALSE)\n\n\n#################################################################################\n###########################         INPUT FORMS             #####################\n########################### 1) card_form.csv w/ POOL entry  #####################\n########################### 2) draftkings salary info       #####################\n########################### 3) projections = manually input confidence value   ##\n#################################################################################\n\npool_entry <- read.csv(file=paste0(local_path,\"output\\\\card_form \",\".csv\"), header=TRUE, sep=\",\")\npool_entry <- pool_entry[,15:16] \npool_entry <- pool_entry[complete.cases(pool_entry),]\n\nsalaries <- read.csv(file=paste0(local_path,\"output\\\\DKSalaries\",\".csv\"), header=TRUE, sep=\",\")\nsalaries <-salaries[,1:4]\nsalaries[salaries==\"\"]<-NA\nsalaries <-salaries[complete.cases(salaries),]\nsalaries[,2] <-toupper(salaries[,2])\n\npool_f<-append_dk_salary(pool_entry,salaries)\n\n\n\n\n\nget_all_lineups_v2<-function(x){\n  \n  #ALL POSSIBLE COMBOS GIVEN ENTRY\n  #SUMS PROJECTION AND SALARY (FROM ENTRY)\n  hld<-combn(x[,1],6)\n  hld<-as.data.frame(hld)\n  hldrow1<-NULL;hldrow2<-NULL;\n  for(i in seq(1,length(colnames(hld)),1)){\n    score<-0\n    salary<-0\n    for(j in seq(1,length(hld[,1]),1)){\n      name <- hld[j,i]\n      for(k in seq(1,length(x[,1]),1)){\n        if(as.character(x[k,1]) == as.character(name)){\n          score<-score + as.numeric(as.character(x[k,2]))\n          salary<-salary + as.numeric(as.character(x[k,3]))\n        }\n      }\n    }\n    hldrow1<-cbind(hldrow1,as.character(score));hldrow2<-cbind(hldrow2,as.character(salary))\n  }\n  colnames(hldrow1)<-colnames(hld);colnames(hldrow2)<-colnames(hld)\n  hld<-rbind(hld,hldrow1,hldrow2)\n  \n  \n  #CUTTING OVER L/U LIMIT / UNDER MEAN POINT VALUE\n  hldf<-NULL\n  for(i in seq(1,length(colnames(hld)),1)){\n    if(as.numeric(as.character(hld[8,i])) <= 50000 & as.numeric(as.character(hld[8,i])) >= 47000){\n      if(is.null(hldf)==TRUE){\n        hldf<-as.vector(hld[,i])\n      } else {\n        hldf<-cbind(hldf, as.vector(hld[,i]))\n      }\n    }\n  }\n  \n  #CREATE POINT CUT OFF\n  cutoff<-as.matrix(hldf[7,])\n  cutoff<-summary(as.numeric(cutoff))\n  cutoff<-cutoff[c(\"3rd Qu.\")]\n  hldb<-NULL\n  for(i in seq(1,length(colnames(hldf)),1)){\n    if(as.numeric(as.character(hldf[7,i])) >= as.numeric(cutoff)){\n      if(is.null(hldb)==TRUE){\n        hldb<-as.vector(hldf[,i])\n      } else {\n        hldb<-cbind(hldb, as.vector(hldf[,i]))\n      }\n    }\n  }  \n  \n  #loop again in case identical but out of order...\n  skip<-FALSE;hldfinal<-NULL;\n  for(i in seq(1,length(hldb[1,]),1)){\n    for(j in seq(1,length(hldb[1,]),1)){\n      skip<-compareEqual(as.matrix(hldb[1:8,i]),as.matrix(hldb[1:8,j]),ignoreDimOrder=TRUE)\n    } \n    if(!isTRUE(skip)){\n      if(is.null(hldfinal)==TRUE){\n        hldfinal<-as.vector(hldb[,i])\n      }else{\n        hldfinal<-cbind(hldfinal,as.vector(hldb[,i]))\n      }\n    }\n    skip<-FALSE\n  }\n  \n  return(hldfinal)\n}\n\n\n\n\n\n\n\n\n\n\ntotal_combos<-get_all_lineups_v2(pool_f)\n\n\n\n\n\n\n\n\n\n\n\n\n\nids <- read.csv(file=paste0(local_path,\"output\\\\DKSalaries\",\".csv\"), header=TRUE, sep=\",\")\nids <-ids[,1:2]\nids[ids==\"\"]<-NA\nids <-ids[complete.cases(ids),]\nids[,2] <-toupper(ids[,2])\n\ndk_lineups<-format_to_dk(total_combos, ids)\n\n#####################################################\n##################  WRITE OUTPUT  ###################\n#####################################################\nlu_check<-tryCatch({\n  read.csv(file=paste0(local_path,\"output\\\\DK_LINE\",\".csv\"), header=TRUE, sep=\",\")\n}, warning = function(w){lu_check<-NULL})\nif(is.null(lu_check)==TRUE){\n  write.csv(dk_lineups, file=paste0(local_path,\"output\\\\DK_LINE\",\".csv\"), row.names=FALSE)\n} else{\n  write.table(dk_lineups, file=paste0(local_path,\"output\\\\DK_LINE\",\".csv\"), sep=\",\", row.names=FALSE,col.names = FALSE, append=TRUE)\n}\n\nhelp(combn)\n\n# ####################################################################################\n# #FAKE SALARIES :: JUST IN CASE!\n# fake_sal <- read.csv(file=paste(local_path,\"card_form\",\".csv\"), header=TRUE, sep=\",\")\n# fake_sal <- fake_sal[,15]\n# fake_sal <- fake_sal[complete.cases(fake_sal)]\n# pool_entry<-cbind(pool_entry,fake_sal)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1475079559357.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3893547550",
    "id" : "40755B30",
    "lastKnownWriteTime" : 1475189537,
    "path" : "C:/git/fightmetrics/fightmetrics.R",
    "project_path" : "fightmetrics.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}